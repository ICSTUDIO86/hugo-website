name: Deploy IC Studio to GitHub Pages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# 设置权限
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在运行和最新队列之间的运行队列
concurrency:
  group: "pages"
  cancel-in-progress: false

# 默认设置为bash
defaults:
  run:
    shell: bash

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.121.0
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: 🛠️ 安装 Hugo CLI (缓存优化)
        id: hugo-cache
        uses: actions/cache@v3
        with:
          path: /tmp/hugo
          key: hugo-${{ env.HUGO_VERSION }}-linux-amd64
          
      - name: 📥 下载 Hugo (如果未缓存)
        if: steps.hugo-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/hugo
          wget -O /tmp/hugo/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb
          
      - name: ⚡ 安装 Hugo
        run: sudo dpkg -i /tmp/hugo/hugo.deb

      - name: 🛠️ 安装 Node.js (优化版本)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 📦 安装依赖 (并行优化)
        run: |
          # 设置 npm 配置优化构建速度
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 2
          npm config set fetch-timeout 60000
          
          # 并行安装依赖
          npm ci --prefer-offline --no-audit --no-fund --progress=false

      - name: 🎨 构建和优化 CSS/JS
        run: |
          # 并行构建资源
          npm run build:css &
          npm run build:js &
          wait
          
          # 压缩和优化静态资源
          npm run optimize

      - name: 🗜️ 图片优化
        run: |
          # 安装图片优化工具
          npm install -g imagemin-cli imagemin-webp imagemin-mozjpeg imagemin-pngquant
          
          # 优化图片并生成 WebP 格式
          find static/images -name "*.jpg" -o -name "*.png" | xargs -P 4 -I {} sh -c '
            imagemin {} --out-dir=static/images/optimized --plugin=mozjpeg --plugin=pngquant
            imagemin {} --out-dir=static/images/webp --plugin=webp
          '

      - name: 🔧 设置 GitHub Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: 🏗️ 构建 Hugo 网站 (优化版)
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          HUGO_ENABLEGITINFO: true
        run: |
          # Hugo 构建优化参数
          hugo \
            --gc \
            --minify \
            --enableGitInfo \
            --cleanDestinationDir \
            --baseURL "${{ steps.pages.outputs.base_url }}/" \
            --cacheDir ${{ runner.temp }}/hugo_cache \
            --destination ./public
            
          # 生成站点地图和 RSS
          hugo --baseURL "${{ steps.pages.outputs.base_url }}/" --config config.toml,config-sitemap.toml

      - name: 📊 生成性能报告
        run: |
          # 分析构建产物
          echo "=== 构建统计 ==="
          echo "总文件数: $(find public -type f | wc -l)"
          echo "总大小: $(du -sh public | cut -f1)"
          echo ""
          echo "=== 文件类型分布 ==="
          find public -type f | sed 's/.*\.//' | sort | uniq -c | sort -rn
          echo ""
          echo "=== 大文件检查 (>100KB) ==="
          find public -type f -size +100k -exec du -sh {} \; | sort -hr

      - name: 🗜️ 后构建优化
        run: |
          # Brotli 压缩
          find public -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.json" -o -name "*.xml" \) \
            -exec brotli -q 11 -o {}.br {} \;
          
          # Gzip 压缩
          find public -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.json" -o -name "*.xml" \) \
            -exec gzip -k -9 {} \;
          
          # 生成资源清单
          find public -type f -name "*.css" -o -name "*.js" > public/resource-manifest.txt

      - name: 🔍 检查关键资源
        run: |
          # 验证关键文件存在
          required_files=(
            "public/index.html"
            "public/css/main.css"
            "public/js/trial-limiter.js"
            "public/tools/sight-reading-generator.html"
            "public/manifest.json"
            "public/sw.js"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -ne 0 ]; then
            echo "❌ 缺少关键文件:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          else
            echo "✅ 所有关键文件都存在"
          fi

      - name: 📤 上传构建结果 (优化版)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
          retention-days: 30

      - name: 🔧 设置 GitHub Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: 📤 上传构建结果
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # 部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
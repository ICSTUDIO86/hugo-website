/**
 * IC 视奏工具 - 设备级别试用限制
 * 每台设备限制试用 10 分钟
 */

class TrialLimiter {
  constructor() {
    this.storageKey = 'ic-sight-reading-trial';
    this.trialDuration = 10 * 60 * 1000; // 10 分钟（毫秒）
    this.deviceId = this.generateDeviceId();
    this.warningShown = false;
  }

  // 生成设备唯一标识（增强版）
  generateDeviceId() {
    let deviceId = localStorage.getItem('ic-device-id');
    if (!deviceId) {
      // 增强的设备指纹
      const fingerprint = this.generateDeviceFingerprint();
      deviceId = this.hashCode(fingerprint).toString(36);
      
      // 多层存储防护
      localStorage.setItem('ic-device-id', deviceId);
      sessionStorage.setItem('ic-device-id-session', deviceId);
      
      // 设置一个隐藏的 cookie 作为备用验证
      document.cookie = `ic_device_backup=${deviceId}; path=/; max-age=${365*24*60*60}; SameSite=Strict`;
    }
    return deviceId;
  }

  // 生成增强的设备指纹
  generateDeviceFingerprint() {
    const fp = [];
    
    // 基础浏览器信息
    fp.push(navigator.userAgent);
    fp.push(navigator.language);
    fp.push(navigator.languages?.join(',') || 'unknown');
    fp.push(navigator.platform);
    fp.push(navigator.cookieEnabled);
    
    // 屏幕信息
    fp.push(screen.width + 'x' + screen.height);
    fp.push(screen.colorDepth);
    fp.push(screen.pixelDepth);
    fp.push(window.devicePixelRatio || 'unknown');
    
    // 时区和地理信息
    fp.push(Intl.DateTimeFormat().resolvedOptions().timeZone);
    fp.push(new Date().getTimezoneOffset());
    
    // 硬件信息
    fp.push(navigator.hardwareConcurrency || 'unknown');
    fp.push(navigator.maxTouchPoints || 0);
    fp.push(navigator.deviceMemory || 'unknown');
    
    // WebGL 指纹
    const webglFingerprint = this.getWebGLFingerprint();
    fp.push(webglFingerprint);
    
    // Canvas 指纹
    const canvasFingerprint = this.getCanvasFingerprint();
    fp.push(canvasFingerprint);
    
    // 音频上下文指纹
    const audioFingerprint = this.getAudioFingerprint();
    fp.push(audioFingerprint);
    
    return fp.join('|');
  }

  // Canvas 指纹
  getCanvasFingerprint() {
    try {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      // 绘制复杂图形
      ctx.textBaseline = 'top';
      ctx.font = '14px Arial';
      ctx.fillStyle = '#f60';
      ctx.fillRect(125, 1, 62, 20);
      ctx.fillStyle = '#069';
      ctx.fillText('IC Studio 🎵', 2, 15);
      ctx.fillStyle = 'rgba(102, 204, 0, 0.7)';
      ctx.fillText('Device Fingerprint', 4, 45);
      
      // 添加一些几何图形
      ctx.globalCompositeOperation = 'multiply';
      ctx.fillStyle = 'rgb(255,0,255)';
      ctx.beginPath();
      ctx.arc(50, 50, 50, 0, Math.PI * 2, true);
      ctx.closePath();
      ctx.fill();
      
      return canvas.toDataURL().slice(-50); // 只取最后50个字符
    } catch (e) {
      return 'canvas_error';
    }
  }

  // WebGL 指纹
  getWebGLFingerprint() {
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      
      if (!gl) return 'no_webgl';
      
      const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
      if (debugInfo) {
        const vendor = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);
        const renderer = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);
        return `${vendor}_${renderer}`;
      }
      
      return gl.getParameter(gl.VERSION);
    } catch (e) {
      return 'webgl_error';
    }
  }

  // 音频上下文指纹
  getAudioFingerprint() {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const analyser = audioContext.createAnalyser();
      const gainNode = audioContext.createGain();
      
      oscillator.type = 'triangle';
      oscillator.frequency.value = 10000;
      gainNode.gain.value = 0.05;
      
      oscillator.connect(analyser);
      analyser.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.start();
      
      const frequencyData = new Uint8Array(analyser.frequencyBinCount);
      analyser.getByteFrequencyData(frequencyData);
      
      oscillator.stop();
      audioContext.close();
      
      return frequencyData.slice(0, 30).join(',');
    } catch (e) {
      return 'audio_error';
    }
  }

  // 简单哈希函数
  hashCode(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // 转换为32位整数
    }
    return Math.abs(hash);
  }

  // 检查试用状态（增强防作弊版本）
  checkTrialStatus() {
    const trialData = this.getTrialData();
    const now = Date.now();

    // 检查是否在豁免期内
    const exemptTime = localStorage.getItem('ic-anticheat-exempt');
    const inExemptPeriod = exemptTime && (Date.now() - parseInt(exemptTime) < 5 * 60 * 1000);
    
    // 只有在非豁免期内才进行反作弊检测
    if (!inExemptPeriod && this.detectCheating(trialData)) {
      console.warn('🚨 检测到潜在的作弊行为');
      return { 
        allowed: false, 
        remaining: 0,
        expired: true,
        reason: 'security_violation'
      };
    }

    if (!trialData.startTime) {
      // 首次使用，记录开始时间
      this.startTrial();
      return { 
        allowed: true, 
        remaining: this.trialDuration,
        isFirstTime: true,
        inExemptPeriod 
      };
    }

    const elapsed = now - trialData.startTime;
    const remaining = Math.max(0, this.trialDuration - elapsed);

    // 验证时间合理性
    if (elapsed < 0) {
      console.warn('🚨 检测到时间异常');
      this.startTrial(); // 重新开始
      return { 
        allowed: true, 
        remaining: this.trialDuration,
        isFirstTime: true,
        inExemptPeriod 
      };
    }

    // 如果在豁免期内，即使试用时间到了也允许继续使用
    if (remaining <= 0 && !inExemptPeriod) {
      // 记录试用结束
      this.recordTrialEnd();
      return { 
        allowed: false, 
        remaining: 0,
        expired: true,
        inExemptPeriod 
      };
    }

    // 如果在豁免期内且试用时间到了，显示为剩余时间但允许继续使用
    if (remaining <= 0 && inExemptPeriod) {
      console.log('🛡️ 豁免期内，延长试用时间');
      return {
        allowed: true,
        remaining: 60000, // 显示还有1分钟，实际在豁免期内
        inExemptPeriod,
        exemptMode: true
      };
    }

    return { 
      allowed: true, 
      remaining,
      elapsed,
      inExemptPeriod 
    };
  }

  // 反作弊检测
  detectCheating(trialData) {
    try {
      // 检查豁免期（避免重置后误判）
      const exemptTime = localStorage.getItem('ic-anticheat-exempt');
      
      if (exemptTime) {
        const exemptStart = parseInt(exemptTime);
        const exemptDuration = 5 * 60 * 1000; // 5分钟豁免期
        const timeElapsed = Date.now() - exemptStart;
        
        if (timeElapsed < exemptDuration) {
          return false; // 豁免期内，跳过检测
        } else {
          // 豁免期结束，清理标记
          localStorage.removeItem('ic-anticheat-exempt');
        }
      }
      // 检测1：验证设备ID一致性
      const currentDeviceId = this.generateDeviceId();
      if (trialData.deviceId && trialData.deviceId !== currentDeviceId) {
        console.log('⚠️ 设备ID不匹配:', { stored: trialData.deviceId, current: currentDeviceId });
        return true;
      }

      // 检测2：检查多重存储一致性
      const sessionId = sessionStorage.getItem('ic-device-id-session');
      const cookieId = this.getCookieValue('ic_device_backup');
      if (sessionId && sessionId !== currentDeviceId) {
        return true;
      }
      if (cookieId && cookieId !== currentDeviceId) {
        return true;
      }

      // 检测3：时间篡改检测
      if (trialData.startTime && trialData.startTime > Date.now()) {
        console.warn('⚠️ 检测到未来时间戳');
        return true;
      }

      // 检测4：频繁重置检测
      const resetCount = parseInt(localStorage.getItem('ic-reset-count') || '0');
      if (resetCount > 3) {
        console.warn('⚠️ 频繁重置检测');
        return true;
      }

      return false;
    } catch (error) {
      console.error('反作弊检测异常:', error);
      return false;
    }
  }

  // 获取Cookie值
  getCookieValue(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
  }

  // 记录试用结束
  recordTrialEnd() {
    const endData = {
      endTime: Date.now(),
      deviceId: this.deviceId,
      userAgent: navigator.userAgent.slice(0, 100)
    };
    localStorage.setItem('ic-trial-end', JSON.stringify(endData));
  }

  // 开始试用
  startTrial() {
    const trialData = {
      deviceId: this.deviceId,
      startTime: Date.now(),
      version: '1.0'
    };
    localStorage.setItem(this.storageKey, JSON.stringify(trialData));
  }

  // 获取试用数据
  getTrialData() {
    try {
      const data = localStorage.getItem(this.storageKey);
      return data ? JSON.parse(data) : {};
    } catch (error) {
      console.error('读取试用数据失败:', error);
      return {};
    }
  }

  // 格式化剩余时间
  formatTime(milliseconds) {
    const minutes = Math.floor(milliseconds / 60000);
    const seconds = Math.floor((milliseconds % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  }

  // 显示试用状态 - 完全重构避免清空输入框
  showTrialStatus(status) {
    const statusElement = document.getElementById('trial-status');
    if (!statusElement) return;
  
    // 【新方案】使用独立的状态显示和输入区域，避免HTML重新生成
    this.updateTrialStatusDisplay(status);
    this.ensureAccessCodeArea();
  }

  // 更新试用状态显示（不影响输入框）
  updateTrialStatusDisplay(status) {
    const statusElement = document.getElementById('trial-status');
    if (!statusElement) return;

    // 查找或创建状态显示区域
    let statusDisplayDiv = statusElement.querySelector('#trial-status-display');
    if (!statusDisplayDiv) {
      statusDisplayDiv = document.createElement('div');
      statusDisplayDiv.id = 'trial-status-display';
      statusElement.appendChild(statusDisplayDiv);
    }

    // 只更新状态显示内容，不触碰输入区域
    let statusContent = '';
    
    if (status.inExemptPeriod) {
      const remaining = this.formatTime(status.remaining);
      statusContent = `
        <div class="trial-active">
          <h3>⏰ 试用剩余时间：<strong>${remaining}</strong></h3>
        </div>
      `;
    } else if (status.expired) {
      statusContent = `
        <div class="trial-expired">
          <h3 style="color: #e74c3c;">😔 免费试用时间已用完</h3>
          <p style="color: #e74c3c;">每台设备可免费试用 10 分钟</p>
        </div>
      `;
    } else if (status.isFirstTime) {
      statusContent = `
        <div class="trial-welcome">
          <h3>🎉 欢迎试用 IC 视奏工具！</h3>
          <p>您有 <strong>10 分钟</strong> 的免费试用时间</p>
        </div>
      `;
    } else {
      const remaining = this.formatTime(status.remaining);
      statusContent = `
        <div class="trial-active">
          <h3>⏰ 试用剩余时间：<strong>${remaining}</strong></h3>
        </div>
      `;
    }

    statusDisplayDiv.innerHTML = statusContent;
  }

  // 确保访问码区域存在（只创建一次，不重复创建）
  ensureAccessCodeArea() {
    const statusElement = document.getElementById('trial-status');
    if (!statusElement) return;

    // 检查是否已有访问码区域
    let accessCodeDiv = statusElement.querySelector('#access-code-area');
    if (accessCodeDiv) {
      return; // 已存在，不需要重新创建
    }

    // 创建访问码区域（只创建一次）
    accessCodeDiv = document.createElement('div');
    accessCodeDiv.id = 'access-code-area';
    accessCodeDiv.style.marginTop = '20px';
    
    accessCodeDiv.innerHTML = `
      <h3 style="color: #667eea; margin-bottom: 10px;">输入访问码</h3>
      <div style="display: flex; gap: 10px; align-items: center;">
        <input type="text" id="access-code-input" placeholder="输入访问码(11-12位)" 
               style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 6px; font-size: 14px; text-transform: uppercase;"
               maxlength="12">
        <button onclick="directVerifyCode()" 
                style="padding: 10px 20px; background: #667eea; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 500;">
          验证
        </button>
      </div>
      <div id="verify-result" style="margin-top: 10px; font-size: 14px;"></div>
      <div style="text-align: center;">
        <button id="forgot-code-btn" 
                onclick="showForgotCodeDialog()" 
                style="background: none; border: none; color: #888; font-size: 14px; text-decoration: underline; cursor: pointer; padding: 8px; transition: color 0.3s ease;"
                onmouseover="this.style.color='#667eea';"
                onmouseout="this.style.color='#888';">
          忘记访问码？点击找回
        </button>
      </div>
    `;

    statusElement.appendChild(accessCodeDiv);
    console.log('✅ 访问码输入区域已创建（一次性）');
  }

  // 初始化试用限制器
  async init() {
    const status = this.checkTrialStatus();
    
    // 服务器端验证（如果有CloudBase API）
    if (window.cloudbaseAPI && status.allowed) {
      try {
        await this.validateTrialWithServer();
      } catch (error) {
        console.warn('服务器端验证失败:', error.message);
      }
    }
    
    if (!status.allowed) {
      this.blockAccess(status.reason);
      return false;
    }

    // 确保试用期间工具可用 - 延迟调用确保DOM完全加载
    setTimeout(() => {
      this.ensureToolAccess();
      console.log('🔄 页面加载后自动启用试用工具');
    }, 100);
    
    this.showTrialStatus(status);
    this.startTimer(status.remaining);
    return true;
  }

  // 服务器端试用验证
  async validateTrialWithServer() {
    try {
      const trialData = this.getTrialData();
      const validationData = {
        action: 'validate_trial',
        device_id: this.deviceId,
        trial_start: trialData.startTime,
        user_agent: navigator.userAgent.slice(0, 100),
        timestamp: Date.now()
      };

      // 调用服务器验证
      const result = await window.cloudbaseAPI.httpRequest('/validate-trial', validationData);
      
      if (result.code !== 200) {
        console.warn('服务器端试用验证失败:', result.message);
        // 可以根据需要决定是否强制结束试用
      }
    } catch (error) {
      console.error('服务器端验证异常:', error);
    }
  }

  // 确保工具在试用期间可用
  ensureToolAccess() {
    console.log('🔓 确保视奏工具在试用期间完全可用');
    
    // 1. 确保工具界面可见
    const toolContainer = document.querySelector('.sight-reading-tool');
    if (toolContainer) {
      toolContainer.style.display = 'block';
      toolContainer.style.opacity = '1';
      toolContainer.style.pointerEvents = 'auto';
      console.log('✅ 视奏工具界面已启用');
    }
    
    // 2. 确保生成按钮可用并恢复正常文本
    const generateBtn = document.getElementById('generateBtn') || 
                       document.querySelector('button[onclick*="generateMelody"]') ||
                       document.querySelector('button.btn-primary');
    if (generateBtn) {
      generateBtn.disabled = false;
      generateBtn.style.opacity = '1';
      generateBtn.style.cursor = 'pointer';
      generateBtn.style.pointerEvents = 'auto';
      generateBtn.removeAttribute('disabled');
      
      // 恢复按钮正常文本
      generateBtn.textContent = '生成旋律';
      generateBtn.innerHTML = '生成旋律';
      
      console.log('✅ 生成按钮已完全启用，文本已恢复为"生成旋律"');
    } else {
      console.log('❌ 未找到生成按钮');
    }
    
    // 3. 确保所有输入控件可用
    const allInputs = document.querySelectorAll('input, select, button, textarea');
    allInputs.forEach(input => {
      if (input.id !== 'generateBtn') { // 避免重复处理
        input.disabled = false;
        input.style.opacity = '1';
        input.style.pointerEvents = 'auto';
      }
    });
    console.log('✅ 所有输入控件已启用');
    
    // 4. 移除可能的访问限制覆盖层
    const overlays = document.querySelectorAll('.access-overlay, .trial-overlay, .premium-overlay');
    overlays.forEach(overlay => overlay.remove());
    
    // 5. 确保没有全局权限检查函数阻止使用
    if (window.checkFullAccess) {
      // 临时覆盖权限检查，在试用期间返回 true
      const originalCheck = window.checkFullAccess;
      window.checkFullAccess = function() {
        // 如果在豁免期内，返回 true 允许使用
        const exemptTime = localStorage.getItem('ic-anticheat-exempt');
        if (exemptTime && (Date.now() - parseInt(exemptTime) < 5 * 60 * 1000)) {
          return true;
        }
        // 否则检查试用状态
        if (window.trialLimiter) {
          const status = window.trialLimiter.checkTrialStatus();
          return status.allowed;
        }
        return originalCheck();
      };
      console.log('✅ 权限检查已调整为支持试用模式');
    }
    
    // 6. 隐藏支付区域（试用期间不需要显示）
    const paymentSection = document.getElementById('zpay-container');
    if (paymentSection) {
      paymentSection.style.display = 'none';
    }
    
    // 7. 隐藏访问码输入区域（试用期间不需要显示）
    const accessCodeContainer = document.getElementById('access-code-container');
    if (accessCodeContainer) {
      accessCodeContainer.style.display = 'none';
    }
    
    console.log('🎉 试用工具完全可用状态已确保');
  }

  // 阻止访问
  blockAccess() {
    console.log('🚫 试用时间已结束，阻止工具访问');
    
    // 修改生成按钮为试用结束状态
    const generateBtn = document.getElementById('generateBtn') || 
                       document.querySelector('button[onclick*="generateMelody"]') ||
                       document.querySelector('button.btn-primary');
    if (generateBtn) {
      generateBtn.disabled = true;
      generateBtn.textContent = '试用已结束';
      generateBtn.innerHTML = '试用已结束';
      generateBtn.style.opacity = '0.5';
      generateBtn.style.cursor = 'not-allowed';
      console.log('🚫 生成按钮已设置为"试用已结束"');
    }
    
    // 隐藏工具界面
    const toolContainer = document.querySelector('.sight-reading-tool');
    if (toolContainer) {
      toolContainer.style.display = 'none';
    }

    // 显示购买提示
    this.showTrialStatus({ expired: true });
    
    // 显示支付区域
    const paymentSection = document.getElementById('zpay-container');
    if (paymentSection) {
      paymentSection.style.display = 'block';
      // 滚动到购买区域
      setTimeout(() => {
        paymentSection.scrollIntoView({ behavior: 'smooth' });
      }, 1000);
    }
  }

  // 启动定时器
  startTimer(remaining) {
    const timer = setInterval(() => {
      const status = this.checkTrialStatus();
      
      if (!status.allowed) {
        clearInterval(timer);
        this.blockAccess();
        return;
      }

      // 【修复】减少更新频率，避免过度干扰用户输入
      this.showTrialStatus(status);

      // 警告功能已移除
    }, 3000); // 改为每3秒更新一次，减少干扰
    
    // 启动定时器时也确保工具可用
    setTimeout(() => {
      this.ensureToolAccess();
      console.log('🔄 定时器启动后再次确保工具可用');
    }, 500);
  }

  // 显示警告提示
  showWarning() {
    const warning = document.createElement('div');
    warning.className = 'trial-warning-popup';
    warning.innerHTML = `
      <div class="warning-content">
        <h3>⚠️ 试用时间即将结束</h3>
        <p>还剩不到 5 分钟的试用时间</p>
        <p>购买完整版可永久使用所有功能</p>
        <div class="warning-buttons">
          <button onclick="this.parentElement.parentElement.parentElement.remove()" class="btn-secondary">继续试用</button>
          <a href="#zpay-container" onclick="this.parentElement.parentElement.parentElement.remove()" class="btn-primary">立即购买</a>
        </div>
      </div>
    `;
    
    document.body.appendChild(warning);
    
    // 3秒后自动关闭
    setTimeout(() => {
      if (warning.parentElement) {
        warning.remove();
      }
    }, 10000);
  }
}

// 全局实例
window.trialLimiter = new TrialLimiter();

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', function() {
  if (window.location.pathname.includes('sight-reading-generator') || 
      document.querySelector('.sight-reading-tool')) {
    
    // 检查是否有有效的访问码，如果有则跳过试用限制
    const hasValidAccess = window.checkFullAccess && window.checkFullAccess();
    if (!hasValidAccess) {
      console.log('🔄 启动试用限制器...');
      window.trialLimiter.init();
      
      // 额外的延迟确保，防止其他代码干扰
      setTimeout(() => {
        const status = window.trialLimiter.checkTrialStatus();
        if (status.allowed) {
          window.trialLimiter.ensureToolAccess();
          console.log('🛡️ 页面加载完成后再次确保试用工具可用');
        }
      }, 1000);
      
      // 再次确保 - 防止UI管理器等其他代码干扰
      setTimeout(() => {
        const status = window.trialLimiter.checkTrialStatus();
        if (status.allowed) {
          window.trialLimiter.ensureToolAccess();
          console.log('🔐 最终确保试用工具可用状态');
        }
      }, 2000);
      
    } else {
      console.log('✅ 检测到有效访问码，跳过试用限制');
    }
  }
});/**
 * IC Studio 视奏工具 - 付费用户界面管理器
 * 确保付费用户获得干净的界面体验，未付费用户受到正确限制
 */

class PremiumUIManager {
  constructor() {
    this.version = '1.0.0-20250107';
    console.log('🎨 付费用户界面管理器初始化', 'v' + this.version);
    
    this.init();
  }

  // 初始化管理器
  init() {
    // 等待DOM加载完成
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.setupUI());
    } else {
      this.setupUI();
    }
  }

  // 检查用户是否有有效的访问码（增强验证）
  hasValidAccessCode() {
    try {
      const accessData = localStorage.getItem('ic-premium-access');
      if (!accessData) return false;

      const data = JSON.parse(accessData);
      if (!data || !data.code || data.code.length !== 12) return false;

      // 检查是否过期（永久访问码不会过期）
      if (data.expiresAt && data.expiresAt !== null && Date.now() > data.expiresAt) {
        return false;
      }

      // 【修复】优先信任服务器验证，只在明确检测到测试前缀时才拒绝
      if (!data.serverVerified) {
        const hasObviousTestPrefix = ['TEST', 'DEMO', 'FORCE', 'BACKUP', 'EMERGENCY'].some(prefix => data.code.startsWith(prefix));
        if (hasObviousTestPrefix) {
          console.warn('⚠️ 检测到测试访问码前缀:', data.code);
          localStorage.removeItem('ic-premium-access');
          return false;
        }
        // 其他情况下信任访问码，特别是Stripe等正常支付生成的访问码
        console.log('ℹ️ 访问码未经前端验证但格式正常，允许使用:', data.code);
      }

      console.log('✅ 检测到有效访问码:', data.code);
      return true;
    } catch (error) {
      console.error('访问码检查失败:', error);
      return false;
    }
  }

  // 验证访问码模式是否为真实购买生成的
  isValidCodePattern(code) {
    // 【修复】放宽验证逻辑，只排除明显的测试前缀，保留Stripe等合法前缀
    const testPrefixes = ['TEST', 'DEMO', 'FORCE', 'BACKUP', 'EMERGENCY'];
    
    const hasTestPrefix = testPrefixes.some(prefix => code.startsWith(prefix));
    if (hasTestPrefix) {
      console.warn('⚠️ 检测到测试访问码前缀:', code);
      return false;
    }

    // 如果是11-12位的字母数字组合，认为是有效的
    if (/^[A-Z0-9]{11,12}$/.test(code)) {
      return true;
    }

    return false;
  }

  // 设置UI界面
  setupUI() {
    // 首先清理测试访问码
    this.cleanupTestAccessCodes();
    
    const hasAccess = this.hasValidAccessCode();
    console.log('🎨 设置UI界面，用户状态:', hasAccess ? '付费用户' : '免费用户');

    if (hasAccess) {
      this.setupPremiumUI();
    } else {
      this.setupTrialUI();
    }
  }

  // 为付费用户设置干净的界面
  setupPremiumUI() {
    console.log('🌟 设置付费用户干净界面');

    // 1. 隐藏支付区域
    const zpayContainer = document.getElementById('zpay-container');
    if (zpayContainer) {
      zpayContainer.style.display = 'none';
      console.log('✅ 隐藏支付区域');
    }

    // 2. 隐藏访问码输入区域
    const accessCodeContainer = document.getElementById('access-code-container');
    if (accessCodeContainer) {
      accessCodeContainer.style.display = 'none';
      console.log('✅ 隐藏访问码输入区域');
    }

    // 3. 隐藏试用状态信息
    const trialStatus = document.getElementById('trial-status');
    if (trialStatus) {
      trialStatus.style.display = 'none';
      console.log('✅ 隐藏试用状态信息');
    }

    // 4. 【增强】移除所有试用相关的警告消息和元素
    this.removeTrialMessages();
    this.removeAllTrialElements();

    // 5. 确保功能按钮正常显示
    this.enableAllFeatures();

    // 6. 显示付费用户欢迎信息（可选）
    this.showPremiumWelcome();

    // 7. 【新增】完全停用试用限制器
    this.disableTrialLimiter();

    console.log('✨ 付费用户干净界面设置完成');
  }

  // 为免费用户设置试用界面
  setupTrialUI() {
    console.log('⏰ 设置免费用户试用界面');

    // 不强制执行试用限制，让 trialLimiter 自己管理试用状态
    // this.enforceTrialLimits();
    
    // 显示支付区域和访问码输入（如果还在试用期内）
    this.showPaymentOptions();
  }

  // 移除所有试用相关消息
  removeTrialMessages() {
    const messagesToRemove = [
      '免费试用时间已用完',
      '永远激活成功',
      '已购买请输入访问码',
      'trial',
      'expired',
      'activate'
    ];

    // 查找并隐藏包含这些关键词的元素
    document.querySelectorAll('*').forEach(element => {
      if (element.innerText) {
        const text = element.innerText.toLowerCase();
        if (messagesToRemove.some(msg => text.includes(msg.toLowerCase()))) {
          // 不是核心功能按钮才隐藏
          if (!element.closest('.controls') && !element.closest('.header')) {
            element.style.display = 'none';
            console.log('✅ 隐藏试用相关消息:', element.innerText.substring(0, 50));
          }
        }
      }
    });
  }

  // 启用所有功能
  enableAllFeatures() {
    // 确保生成按钮可用
    const generateBtn = document.getElementById('generate-btn') || 
                       document.querySelector('[onclick*="generateMelody"]') ||
                       document.querySelector('button[onclick*="generate"]');
    
    if (generateBtn) {
      generateBtn.disabled = false;
      generateBtn.style.opacity = '1';
      generateBtn.style.pointerEvents = 'auto';
      console.log('✅ 生成按钮已启用');
    }

    // 移除任何功能限制
    if (window.trialLimiter) {
      // 重写试用限制器的检查方法
      window.trialLimiter.checkAccess = function() {
        return { allowed: true, remaining: Infinity };
      };
      console.log('✅ 试用限制已移除');
    }
  }

  // 显示付费用户欢迎信息（可选）
  showPremiumWelcome() {
    const header = document.querySelector('.header');
    if (header && !header.querySelector('.premium-status')) {
      const welcomeElement = document.createElement('div');
      welcomeElement.className = 'premium-status';
      welcomeElement.style.cssText = `
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
        display: inline-block;
        margin-bottom: 10px;
      `;
      welcomeElement.innerHTML = '✨ 高级版已激活';
      
      header.insertBefore(welcomeElement, header.firstChild);
      console.log('✅ 显示付费用户状态');
    }
  }

  // 强制执行试用限制
  enforceTrialLimits() {
    if (!window.trialLimiter) return;

    const trialStatus = window.trialLimiter.checkTrialStatus();
    if (!trialStatus.allowed) {
      console.log('⏰ 试用时间已结束，显示升级选项');
      
      // 禁用生成功能
      const generateBtn = document.getElementById('generate-btn') || 
                         document.querySelector('[onclick*="generateMelody"]');
      if (generateBtn) {
        generateBtn.disabled = true;
        generateBtn.style.opacity = '0.5';
      }

      // 显示试用结束消息
      this.showTrialExpiredMessage();
    }
  }

  // 显示试用结束消息
  showTrialExpiredMessage() {
    const trialStatus = document.getElementById('trial-status');
    if (trialStatus) {
      trialStatus.innerHTML = `
        <div style="background: #fff5f5; padding: 15px; border-radius: 8px; border: 2px solid #e74c3c; text-align: center;">
          <h3 style="color: #e74c3c; margin: 0 0 10px 0;">⏰ 免费试用时间已结束</h3>
          <p style="margin: 0; color: #666;">每台设备可免费试用 10 分钟</p>
        </div>
      `;
      trialStatus.style.display = 'block';
    }
  }

  // 显示支付选项
  showPaymentOptions() {
    const zpayContainer = document.getElementById('zpay-container');
    if (zpayContainer) {
      zpayContainer.style.display = 'block';
      console.log('✅ 显示支付选项');
    }

    const accessCodeContainer = document.getElementById('access-code-container');
    if (accessCodeContainer) {
      accessCodeContainer.style.display = 'block';
      console.log('✅ 显示访问码输入');
    }
  }

  // 重新检查并更新UI（用于访问码验证后）
  refreshUI() {
    console.log('🔄 刷新UI状态');
    // 先清理测试访问码再更新UI
    this.cleanupTestAccessCodes();
    this.setupUI();
  }

  // 清理所有测试和应急访问码
  cleanupTestAccessCodes() {
    try {
      const accessData = localStorage.getItem('ic-premium-access');
      if (accessData) {
        const data = JSON.parse(accessData);
        if (data && data.code && !this.isValidCodePattern(data.code)) {
          console.log('🧹 清理测试访问码:', data.code);
          localStorage.removeItem('ic-premium-access');
        }
      }
    } catch (error) {
      console.error('清理访问码时出错:', error);
    }
  }

  // 【新增】移除所有试用相关的DOM元素
  removeAllTrialElements() {
    console.log('🧹 移除所有试用相关元素');
    
    // 移除试用覆盖层
    const overlays = document.querySelectorAll('.trial-overlay, .access-overlay, .premium-overlay');
    overlays.forEach(overlay => {
      overlay.remove();
      console.log('✅ 移除覆盖层:', overlay.className);
    });
    
    // 隐藏包含试用信息的元素
    const trialElements = document.querySelectorAll('[id*="trial"], [class*="trial"]');
    trialElements.forEach(element => {
      if (!element.closest('.controls') && !element.closest('.header')) {
        element.style.display = 'none';
        console.log('✅ 隐藏试用元素:', element.id || element.className);
      }
    });
    
    // 移除试用时间显示
    const timeDisplays = document.querySelectorAll('.trial-active, .trial-expired, .trial-welcome');
    timeDisplays.forEach(display => {
      display.remove();
      console.log('✅ 移除试用时间显示');
    });
  }

  // 【新增】完全停用试用限制器
  disableTrialLimiter() {
    console.log('🔓 完全停用试用限制器');
    
    if (window.trialLimiter) {
      // 重写试用限制器的检查方法
      window.trialLimiter.checkTrialStatus = function() {
        return { 
          allowed: true, 
          remaining: Infinity,
          unlimited: true,
          premium: true
        };
      };
      
      window.trialLimiter.init = function() {
        console.log('🔓 试用限制器已被付费版本禁用');
        return true;
      };
      
      window.trialLimiter.blockAccess = function() {
        console.log('🔓 访问阻止被付费版本忽略');
        return;
      };
      
      console.log('✅ 试用限制器已完全停用');
    }
  }

  // 修复访问控制逻辑（移除强制解锁）
  fixAccessControl() {
    console.log('🔧 修复访问控制逻辑');

    // 恢复正确的访问检查函数
    if (window.checkFullAccess) {
      window.checkFullAccess = () => {
        return this.hasValidAccessCode();
      };
      console.log('✅ 访问控制已修复');
    }

    // 恢复正确的生成函数保护
    if (window.originalGenerateMelody && window.generateMelody) {
      const originalFunction = window.originalGenerateMelody;
      window.generateMelody = function() {
        // 检查权限
        if (!window.premiumUIManager.hasValidAccessCode()) {
          // 检查试用状态
          if (window.trialLimiter) {
            const trialStatus = window.trialLimiter.checkAccess();
            if (!trialStatus.allowed) {
              alert('⏰ 免费试用时间已用完！\n\n每台设备可免费试用10分钟。\n请购买完整版继续使用所有功能。');
              
              // 显示支付区域
              const paymentSection = document.getElementById('zpay-container');
              if (paymentSection) {
                paymentSection.style.display = 'block';
              }
              return;
            }
          }
        }
        
        // 执行原始函数
        return originalFunction.apply(this, arguments);
      };
      console.log('✅ 生成函数保护已修复');
    }
  }
}

// 全局实例化
window.premiumUIManager = new PremiumUIManager();

// 页面加载完成后修复访问控制
document.addEventListener('DOMContentLoaded', function() {
  if (window.premiumUIManager) {
    window.premiumUIManager.fixAccessControl();
  }
});

// 为其他脚本提供刷新UI的方法
window.refreshPremiumUI = function() {
  if (window.premiumUIManager) {
    window.premiumUIManager.refreshUI();
  }
};

// 提供调试用的清理函数
window.cleanupAllTestCodes = function() {
  console.log('🧹 手动清理所有测试访问码');
  localStorage.removeItem('ic-premium-access');
  localStorage.removeItem('ic-verified-user');
  localStorage.removeItem('ic-full-access');
  
  if (window.premiumUIManager) {
    window.premiumUIManager.refreshUI();
  }
  console.log('✅ 已清理所有测试访问码，UI已刷新');
};/**
 * IC 视奏工具 - Cloudbase API 客户端 (混合架构版本)
 * 专为 GitHub Pages + Cloudbase 后端架构设计
 */

class CloudbaseAPI {
  constructor() {
    // Cloudbase API 配置
    this.config = {
      envId: 'cloud1-4g1r5ho01a0cfd85',
      region: 'ap-shanghai',
      // 直接调用云函数HTTP API，不使用SDK
      apiBaseUrl: 'https://cloud1-4g1r5ho01a0cfd85.service.tcloudbase.com'
    };
    
    // 生产模式控制
    this.isTestMode = false; // 生产模式
    this.forceTestMode = false; // 生产模式，允许调用真实API
    this.version = '2.0.1-20250107'; // 版本标识，与支付系统同步
    
    console.log('🔗 CloudbaseAPI 初始化 - 混合架构模式', this.isTestMode ? '(强制测试模式)' : '(生产模式)', 'v' + this.version);
    
    // 设置全局版本标识
    window.cloudbaseApiVersion = this.version;
  }

  // HTTP请求封装 - 生产模式（直连CloudBase）
  async httpRequest(endpoint, data = {}, method = 'POST') {
    const url = `${this.config.apiBaseUrl}${endpoint}`;
    
    console.log('🚀 生产模式 - CloudBase API请求:', { url, method, data });
    
    try {
      const response = await fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'X-Request-Source': 'IC-Studio-Production',
          'X-API-Version': this.version
        },
        mode: 'cors',
        body: method === 'GET' ? undefined : JSON.stringify(data)
      });

      if (!response.ok) {
        throw new Error(`CloudBase API错误 ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      console.log('✅ CloudBase API响应:', result);
      return result;
      
    } catch (error) {
      console.error(`🚨 CloudBase API请求失败 [${endpoint}]:`, error);
      
      // 生产环境降级处理 - 确保用户体验不受影响
      console.log('🚨 CloudBase API 请求失败，但不使用应急处理');
      console.log('🔍 错误详情:', error.message);
      console.log('🔍 请求URL:', `${this.config.apiBaseUrl}${endpoint}`);
      
      // 不再使用应急处理，让真实错误传播上去
      // 这样前端可以看到真正的网络错误，而不是被应急处理掩盖
      
      // 其他情况抛出错误
      throw error;
    }
  }
  
  // 切换到生产模式（管理员功能）
  enableProductionMode() {
    this.isTestMode = false;
    this.forceTestMode = false;
    console.log('🚀 已切换到生产模式 - 将调用真实API');
    localStorage.setItem('ic-api-mode', 'production');
  }
  
  // 切换到测试模式
  enableTestMode() {
    this.isTestMode = true;
    this.forceTestMode = true;
    console.log('🧪 已切换到测试模式 - 将使用模拟API');
    localStorage.setItem('ic-api-mode', 'test');
  }
  
  // 获取当前模式
  getCurrentMode() {
    return this.isTestMode ? 'test' : 'production';
  }

  // 验证访问码 - CloudBase 数据库验证
  async verifyAccessCode(code) {
    console.log('🔍 CloudBase访问码验证:', code);
    
    // 基本格式检查（11-12位字母数字组合）
    if (!code || (code.length !== 12 && code.length !== 11)) {
      console.log('❌ 访问码格式无效:', code);
      return { valid: false, error: '访问码格式无效，请输入11-12位访问码' };
    }
    
    // 检查是否只包含字母数字
    if (!/^[A-Z0-9]+$/.test(code.toUpperCase())) {
      console.log('❌ 访问码格式错误：只能包含字母数字', code);
      return { valid: false, error: '访问码格式无效，只能包含字母和数字' };
    }
    
    try {
      // 调用CloudBase云函数验证访问码
      const result = await this.httpRequest('/verify-access-code', {
        code: code.toUpperCase(),
        deviceId: window.trialLimiter?.deviceId || 'unknown',
        timestamp: Date.now()
      });
      
      console.log('📥 CloudBase验证结果:', result);
      
      if (result.success) {
        console.log('✅ CloudBase验证成功:', result.data.code);
        
        // 保存并激活访问权限
        this.saveValidAccessCode(result.data.code, result.data);
        this.ensurePersistentAccess(result.data.code);
        this.removeTrialRestrictions();
        
        return { 
          valid: true, 
          data: result.data
        };
      } else {
        console.log('❌ CloudBase验证失败:', result.message);
        return { 
          valid: false, 
          error: result.message || '访问码无效或已过期' 
        };
      }
      
    } catch (error) {
      console.error('❌ CloudBase验证错误:', error);
      return { 
        valid: false, 
        error: '验证失败，请稍后重试' 
      };
    }
  }

  // 生成访问码（支付成功后调用）- 生产模式CloudBase API
  async generateAccessCode(paymentData) {
    try {
      console.log('🚀 CloudBase生成访问码请求:', paymentData);
      
      // 调用CloudBase云函数生成访问码
      const result = await this.httpRequest('/generate-access-code', {
        orderId: paymentData.orderId,
        paymentMethod: paymentData.paymentMethod,
        amount: paymentData.amount,
        merchantId: paymentData.merchantId,
        transactionId: paymentData.transactionId,
        deviceId: window.trialLimiter?.deviceId || 'unknown',
        timestamp: Date.now(),
        source: 'ic-studio-production'
      });
      
      console.log('📥 CloudBase API返回结果:', result);

      // 处理新的简化响应格式
      if (result.success && result.accessCode) {
        console.log('✅ CloudBase访问码生成成功:', result.accessCode);
        return { 
          success: true, 
          accessCode: result.accessCode 
        };
      } else if (result.code === 200 && result.data && result.data.accessCode) {
        // 兼容旧格式
        console.log('✅ CloudBase访问码生成成功 (旧格式):', result.data.accessCode);
        return { 
          success: true, 
          accessCode: result.data.accessCode 
        };
      } else {
        console.error('❌ CloudBase访问码生成失败:', result);
        return { 
          success: false, 
          error: result.message || 'CloudBase生成访问码失败' 
        };
      }
    } catch (error) {
      console.error('🚨 CloudBase生成访问码异常:', error);
      // httpRequest方法中已经包含了降级处理
      throw error;
    }
  }

  // 处理支付回调（内部使用）
  async handlePaymentCallback(callbackData) {
    try {
      const result = await this.httpRequest('/zpay-callback', callbackData);
      return result;
    } catch (error) {
      console.error('支付回调处理失败:', error);
      throw error;
    }
  }

  // 保存有效的访问码到本地
  saveValidAccessCode(code, data = {}) {
    const accessData = {
      code: code,
      activatedAt: Date.now(),
      deviceId: window.trialLimiter?.deviceId || 'unknown',
      expiresAt: data.expires_at || null, // 永不过期
      version: '2.0-hybrid'
    };
    
    localStorage.setItem('ic-premium-access', JSON.stringify(accessData));
    console.log('✅ 访问码已保存到本地（永久有效）');
  }

  // 检查本地是否有有效访问码
  getLocalAccessCode() {
    try {
      const data = localStorage.getItem('ic-premium-access');
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error('读取本地访问码失败:', error);
      return null;
    }
  }

  // 检查用户是否有完整版权限
  async hasFullAccess() {
    const localAccess = this.getLocalAccessCode();
    
    if (!localAccess) {
      return { hasAccess: false, reason: 'no-code' };
    }

    // 检查是否过期（永久访问码不会过期）
    if (localAccess.expiresAt && localAccess.expiresAt !== null && Date.now() > localAccess.expiresAt) {
      localStorage.removeItem('ic-premium-access');
      return { hasAccess: false, reason: 'expired' };
    }

    // 在线验证访问码
    const verification = await this.verifyAccessCode(localAccess.code);
    
    if (verification.valid) {
      return { hasAccess: true, accessData: localAccess };
    } else {
      // 访问码无效，清除本地数据
      localStorage.removeItem('ic-premium-access');
      return { 
        hasAccess: false, 
        reason: 'invalid-code', 
        error: verification.error 
      };
    }
  }

  // 初始化访问码输入界面
  initAccessCodeInput() {
    const container = document.getElementById('access-code-container');
    if (!container) return;

    // 不再创建重复的访问码界面，使用HTML中已有的zpay-container中的输入框

    // 监听输入框变化，自动格式化
    const input = document.getElementById('access-code');
    input?.addEventListener('input', function(e) {
      e.target.value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
    });

    // 监听回车键
    input?.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        cloudbaseAPI.handleAccessCodeSubmit();
      }
    });
  }

  // 处理访问码提交 - CloudBase 数据库验证
  async handleAccessCodeSubmit() {
    const input = document.getElementById('access-code');
    const resultDiv = document.getElementById('access-code-result');
    const button = document.getElementById('verify-code-btn');
    
    if (!input || !resultDiv) {
      console.log('🔍 CloudBase: 输入元素未找到，尝试兼容处理');
      // 兼容性处理：尝试查找其他可能的输入框
      const altInput = document.getElementById('access-code-input');
      const altResultDiv = document.getElementById('verify-result');
      
      if (altInput && altResultDiv) {
        this.handleAlternativeAccessCodeSubmit(altInput, altResultDiv);
      }
      return;
    }

    const code = input.value.trim().toUpperCase();
    console.log('🔍 CloudBase处理访问码提交:', code);
    
    if (!code || (code.length !== 12 && code.length !== 11)) {
      resultDiv.innerHTML = '<p style="color: #e74c3c;">⚠️ 请输入有效的11-12位访问码</p>';
      return;
    }

    // 显示验证中状态
    if (button) {
      button.textContent = '验证中...';
      button.disabled = true;
    }
    resultDiv.innerHTML = '<p style="color: #3498db;">🔄 正在验证访问码...</p>';

    try {
      // 调用 CloudBase 数据库验证
      console.log('🚀 调用 CloudBase 数据库验证访问码:', code);
      const result = await this.verifyAccessCode(code);
      
      if (result.valid) {
        console.log('✅ CloudBase 验证成功:', code);
        resultDiv.innerHTML = '<p style="color: #27ae60;">✅ 验证成功！页面即将刷新...</p>';
        
        setTimeout(() => {
          console.log('🔄 CloudBase触发页面刷新');
          window.location.reload();
        }, 1500);
        
      } else {
        console.log('❌ CloudBase 验证失败:', result.error);
        resultDiv.innerHTML = `<p style="color: #e74c3c;">❌ ${result.error}</p>`;
        
        if (button) {
          button.textContent = '验证';
          button.disabled = false;
        }
      }
      
    } catch (error) {
      console.error('❌ 访问码验证异常:', error);
      resultDiv.innerHTML = '<p style="color: #e74c3c;">❌ 验证失败，请稍后重试</p>';
      
      if (button) {
        button.textContent = '验证';
        button.disabled = false;
      }
    }
  }

  // 处理备用访问码输入（兼容页面中的其他输入框）
  async handleAlternativeAccessCodeSubmit(input, resultDiv) {
    const code = input.value.trim().toUpperCase();
    console.log('🔍 CloudBase备用处理访问码:', code);
    
    if (!code || (code.length !== 12 && code.length !== 11)) {
      resultDiv.innerHTML = '<p style="color: #e74c3c;">⚠️ 请输入有效的11-12位访问码</p>';
      return;
    }

    resultDiv.innerHTML = '<p style="color: #3498db;">🔄 正在验证访问码...</p>';
    
    try {
      // 调用 CloudBase 数据库验证
      console.log('🚀 备用方式调用 CloudBase 数据库验证:', code);
      const result = await this.verifyAccessCode(code);
      
      if (result.valid) {
        console.log('✅ 备用验证成功:', code);
        resultDiv.innerHTML = '<p style="color: #27ae60;">✅ 验证成功！页面即将刷新...</p>';
        
        setTimeout(() => {
          window.location.reload();
        }, 1500);
        
      } else {
        console.log('❌ 备用验证失败:', result.error);
        resultDiv.innerHTML = `<p style="color: #e74c3c;">❌ ${result.error}</p>`;
      }
      
    } catch (error) {
      console.error('❌ 备用访问码验证异常:', error);
      resultDiv.innerHTML = '<p style="color: #e74c3c;">❌ 验证失败，请稍后重试</p>';
    }
  }

  // 确保访问权限持久化
  ensurePersistentAccess(code) {
    // 多重存储机制
    localStorage.setItem('ic-verified-user', 'true');
    localStorage.setItem('ic-access-timestamp', Date.now().toString());
    sessionStorage.setItem('ic-session-verified', 'true');
    
    // 设置长期cookie
    document.cookie = `ic_premium_access=${code}; path=/; max-age=${365*24*60*60}; SameSite=Strict`;
    
    console.log('🔒 访问权限已多重持久化');
  }

  // 移除试用限制
  removeTrialRestrictions() {
    // 清除试用相关的localStorage
    localStorage.removeItem('ic-sight-reading-trial');
    localStorage.removeItem('trial-start-time');
    localStorage.removeItem('trial-used-time');
    
    // 设置完整版标记
    localStorage.setItem('ic-full-access', 'true');
    
    console.log('🗑️ 试用限制已移除');
  }

  // 测试访问码验证（调试用）
  async testVerification(code = 'DEMODZLVQITL') {
    console.log('🧪 开始测试访问码验证...');
    try {
      const result = await this.verifyAccessCode(code);
      console.log('🧪 测试结果:', result);
      return result;
    } catch (error) {
      console.error('🧪 测试失败:', error);
      return { valid: false, error: error.message };
    }
  }

  // 生成完全随机的11-12位访问码
  generateRandomAccessCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    const length = Math.random() < 0.5 ? 11 : 12; // 随机选择11位或12位
    let code = '';
    
    for (let i = 0; i < length; i++) {
      code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    
    return code;
  }

  // 获取当前环境信息
  getEnvironmentInfo() {
    return {
      architecture: 'hybrid',
      frontend: 'github-pages',
      backend: 'cloudbase',
      apiEndpoint: this.config.apiBaseUrl,
      version: '2.0'
    };
  }
}

// 全局实例 - 使用新的命名避免冲突
window.cloudbaseAPI = new CloudbaseAPI();

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', async function() {
  console.log('🚀 混合架构初始化:', cloudbaseAPI.getEnvironmentInfo());
  
  // 检查当前页面的完整版权限
  const accessResult = await cloudbaseAPI.hasFullAccess();
  console.log('🔐 权限检查结果:', accessResult);
  
  // 在试用页面根据权限状态决定显示内容
  if (window.location.pathname.includes('sight-reading-generator')) {
    if (accessResult.hasAccess) {
      console.log('✅ 检测到完整版权限，隐藏所有付费相关内容');
      
      // 隐藏试用状态区域
      const statusDiv = document.getElementById('trial-status');
      if (statusDiv) {
        statusDiv.style.display = 'none';
      }
      
      // 隐藏支付区域
      const zpayContainer = document.getElementById('zpay-container');
      if (zpayContainer) {
        zpayContainer.style.display = 'none';
      }
      
      // 隐藏访问码输入区域
      const accessCodeContainer = document.getElementById('access-code-container');
      if (accessCodeContainer) {
        accessCodeContainer.style.display = 'none';
      }
      
    } else {
      // 只有在没有权限时才显示访问码输入
      console.log('🔑 显示访问码输入区域');
      cloudbaseAPI.initAccessCodeInput();
    }
  }
  
  // 在支付页面也检查权限
  if (window.location.pathname.includes('sight-reading-tool')) {
    if (accessResult.hasAccess) {
      console.log('✅ 用户已有完整版权限');
      // 可以隐藏支付区域或显示已激活状态
    }
  }
  
  // 检查是否在完整版页面需要验证权限
  if (window.location.pathname.includes('premium-sight-reading')) {
    if (!accessResult.hasAccess && !window.location.search.includes('verified=true')) {
      alert('⚠️ 需要有效的访问码才能使用完整版功能');
      window.location.href = '/tools/sight-reading-generator.html';
    }
  }
});

// 导出API实例供其他脚本使用
if (typeof module !== 'undefined' && module.exports) {
  module.exports = CloudbaseAPI;
}/**
 * IC Studio - 性能优化器
 * 智能资源加载和性能监控系统
 */

class PerformanceOptimizer {
  constructor() {
    this.config = {
      // CDN 配置
      cdnEndpoints: [
        'https://cdn.jsdelivr.net',
        'https://unpkg.com',
        'https://cdnjs.cloudflare.com'
      ],
      
      // 性能阈值
      thresholds: {
        largeResourceSize: 500 * 1024, // 500KB
        slowLoadTime: 3000, // 3秒
        criticalRenderTime: 1000 // 1秒
      },
      
      // 缓存策略
      cacheStrategy: {
        images: 86400000, // 24小时
        scripts: 604800000, // 7天
        styles: 604800000, // 7天
        fonts: 2592000000 // 30天
      }
    };
    
    this.metrics = {
      loadTimes: {},
      resourceSizes: {},
      cacheHits: 0,
      cacheMisses: 0
    };
    
    this.init();
  }
  
  init() {
    // 页面加载完成后初始化
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.onDOMReady());
    } else {
      this.onDOMReady();
    }
    
    // 窗口加载完成后分析性能
    window.addEventListener('load', () => this.analyzePerformance());
  }
  
  onDOMReady() {
    this.optimizeImages();
    this.optimizeResourceLoading();
    this.setupIntersectionObserver();
    this.preloadCriticalResources();
  }
  
  // 图片优化
  optimizeImages() {
    const images = document.querySelectorAll('img');
    
    images.forEach(img => {
      // 添加懒加载
      if (!img.loading) {
        img.loading = 'lazy';
      }
      
      // 响应式图片优化
      this.optimizeImageSrc(img);
      
      // 图片加载错误处理
      img.onerror = () => this.handleImageError(img);
    });
  }
  
  optimizeImageSrc(img) {
    const src = img.src || img.dataset.src;
    if (!src) return;
    
    // 检测设备像素密度
    const devicePixelRatio = window.devicePixelRatio || 1;
    const viewportWidth = window.innerWidth;
    
    // 根据设备选择合适的图片尺寸
    let optimizedSrc = src;
    
    // 如果是高密度屏幕，使用 2x 图片
    if (devicePixelRatio > 1 && src.includes('/images/')) {
      optimizedSrc = src.replace('/images/', '/images/2x/');
    }
    
    // 小屏幕设备使用较小尺寸
    if (viewportWidth < 768 && src.includes('/images/')) {
      optimizedSrc = src.replace('/images/', '/images/mobile/');
    }
    
    // 检查优化后的图片是否存在
    this.checkImageExists(optimizedSrc).then(exists => {
      if (exists) {
        img.src = optimizedSrc;
      }
    });
  }
  
  checkImageExists(src) {
    return new Promise(resolve => {
      const img = new Image();
      img.onload = () => resolve(true);
      img.onerror = () => resolve(false);
      img.src = src;
    });
  }
  
  handleImageError(img) {
    // 图片加载失败时的备用方案
    console.warn('Image failed to load:', img.src);
    
    // 尝试从备用 CDN 加载
    if (img.src.includes('cdn.jsdelivr.net')) {
      img.src = img.src.replace('cdn.jsdelivr.net', 'unpkg.com');
    } else if (img.src.includes('unpkg.com')) {
      // 最后回退到本地资源
      const localSrc = img.src.replace(/https:\/\/[^\/]+/, '');
      img.src = localSrc;
    }
  }
  
  // 资源加载优化
  optimizeResourceLoading() {
    // 预加载关键资源
    this.preloadCriticalResources();
    
    // 延迟加载非关键资源
    this.deferNonCriticalResources();
    
    // 资源优先级管理
    this.manageResourcePriority();
  }
  
  preloadCriticalResources() {
    const criticalResources = [
      { href: '/css/critical.css', as: 'style' },
      { href: '/js/melody-counter-system.js', as: 'script' },
      { href: '/images/ICLOGO.png', as: 'image' }
    ];
    
    criticalResources.forEach(resource => {
      if (!document.querySelector(`link[href="${resource.href}"]`)) {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.href = resource.href;
        link.as = resource.as;
        
        if (resource.as === 'script') {
          link.crossOrigin = 'anonymous';
        }
        
        document.head.appendChild(link);
      }
    });
  }
  
  deferNonCriticalResources() {
    // 延迟加载第三方脚本
    const deferredScripts = [
      'https://cdn.jsdelivr.net/npm/opensheetmusicdisplay@1.8.5/build/opensheetmusicdisplay.min.js'
    ];
    
    // 等待关键渲染完成后再加载
    setTimeout(() => {
      deferredScripts.forEach(src => {
        if (!document.querySelector(`script[src="${src}"]`)) {
          const script = document.createElement('script');
          script.src = src;
          script.async = true;
          script.defer = true;
          document.head.appendChild(script);
        }
      });
    }, 1000);
  }
  
  manageResourcePriority() {
    // 为关键资源设置高优先级
    const criticalLinks = document.querySelectorAll('link[rel="stylesheet"], link[rel="preload"]');
    criticalLinks.forEach(link => {
      if (!link.importance) {
        link.importance = 'high';
      }
    });
    
    // 为非关键资源设置低优先级
    const nonCriticalScripts = document.querySelectorAll('script[async]:not([data-critical])');
    nonCriticalScripts.forEach(script => {
      script.importance = 'low';
    });
  }
  
  // 设置 Intersection Observer 用于懒加载
  setupIntersectionObserver() {
    if (!('IntersectionObserver' in window)) return;
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          this.loadLazyElement(entry.target);
          observer.unobserve(entry.target);
        }
      });
    }, {
      rootMargin: '50px 0px',
      threshold: 0.1
    });
    
    // 观察需要懒加载的元素
    const lazyElements = document.querySelectorAll('[data-lazy]');
    lazyElements.forEach(element => observer.observe(element));
  }
  
  loadLazyElement(element) {
    const src = element.dataset.src;
    const type = element.dataset.lazy;
    
    switch (type) {
      case 'image':
        element.src = src;
        element.classList.remove('lazy-loading');
        break;
      case 'iframe':
        element.src = src;
        break;
      case 'script':
        this.loadScript(src);
        break;
    }
  }
  
  loadScript(src) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.async = true;
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }
  
  // 性能分析
  analyzePerformance() {
    if (!('performance' in window)) return;
    
    // 获取性能指标
    const perfData = performance.getEntriesByType('navigation')[0];
    const paintData = performance.getEntriesByType('paint');
    
    this.metrics.navigationTiming = {
      dns: perfData.domainLookupEnd - perfData.domainLookupStart,
      tcp: perfData.connectEnd - perfData.connectStart,
      ssl: perfData.connectEnd - perfData.secureConnectionStart,
      ttfb: perfData.responseStart - perfData.requestStart,
      download: perfData.responseEnd - perfData.responseStart,
      domParsing: perfData.domContentLoadedEventStart - perfData.responseEnd,
      resourceLoading: perfData.loadEventStart - perfData.domContentLoadedEventEnd,
      total: perfData.loadEventEnd - perfData.navigationStart
    };
    
    // Core Web Vitals
    this.measureWebVitals();
    
    // 资源加载分析
    this.analyzeResourceLoading();
    
    // 发送性能报告
    this.sendPerformanceReport();
  }
  
  measureWebVitals() {
    // First Contentful Paint
    const fcp = performance.getEntriesByName('first-contentful-paint')[0];
    if (fcp) {
      this.metrics.fcp = fcp.startTime;
    }
    
    // Largest Contentful Paint (需要 PerformanceObserver)
    if ('PerformanceObserver' in window) {
      new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1];
        this.metrics.lcp = lastEntry.startTime;
      }).observe({ entryTypes: ['largest-contentful-paint'] });
      
      // First Input Delay
      new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach(entry => {
          this.metrics.fid = entry.processingStart - entry.startTime;
        });
      }).observe({ entryTypes: ['first-input'] });
    }
  }
  
  analyzeResourceLoading() {
    const resources = performance.getEntriesByType('resource');
    
    resources.forEach(resource => {
      const size = resource.transferSize || resource.encodedBodySize || 0;
      const loadTime = resource.responseEnd - resource.startTime;
      
      this.metrics.resourceSizes[resource.name] = size;
      this.metrics.loadTimes[resource.name] = loadTime;
      
      // 检查是否有性能问题
      if (size > this.config.thresholds.largeResourceSize) {
        console.warn('Large resource detected:', resource.name, size + ' bytes');
      }
      
      if (loadTime > this.config.thresholds.slowLoadTime) {
        console.warn('Slow resource loading:', resource.name, loadTime + ' ms');
      }
    });
  }
  
  sendPerformanceReport() {
    // 只在生产环境发送报告
    if (window.location.hostname === 'localhost') return;
    
    const report = {
      url: window.location.href,
      userAgent: navigator.userAgent,
      timestamp: Date.now(),
      metrics: this.metrics,
      viewport: {
        width: window.innerWidth,
        height: window.innerHeight,
        pixelRatio: window.devicePixelRatio
      },
      connection: navigator.connection ? {
        effectiveType: navigator.connection.effectiveType,
        downlink: navigator.connection.downlink,
        rtt: navigator.connection.rtt
      } : null
    };
    
    // 发送到性能监控服务
    this.sendToAnalytics(report);
  }
  
  sendToAnalytics(data) {
    // 使用 sendBeacon API 发送数据
    if ('sendBeacon' in navigator) {
      const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
      navigator.sendBeacon('/api/performance', blob);
    } else {
      // 备用方案：使用 fetch
      fetch('/api/performance', {
        method: 'POST',
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json'
        },
        keepalive: true
      }).catch(error => {
        console.warn('Failed to send performance data:', error);
      });
    }
  }
  
  // 优化建议
  getOptimizationSuggestions() {
    const suggestions = [];
    
    // 检查图片优化
    const images = document.querySelectorAll('img');
    const unoptimizedImages = Array.from(images).filter(img => 
      !img.loading || img.loading !== 'lazy'
    );
    
    if (unoptimizedImages.length > 0) {
      suggestions.push(`Found ${unoptimizedImages.length} images without lazy loading`);
    }
    
    // 检查未使用的 CSS
    const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');
    if (stylesheets.length > 5) {
      suggestions.push('Consider consolidating CSS files');
    }
    
    // 检查阻塞资源
    const blockingScripts = document.querySelectorAll('script:not([async]):not([defer])');
    if (blockingScripts.length > 0) {
      suggestions.push(`Found ${blockingScripts.length} render-blocking scripts`);
    }
    
    return suggestions;
  }
}

// 自动初始化性能优化器
const performanceOptimizerInstance = new PerformanceOptimizer();

// 暴露到全局作用域供调试使用
window.performanceOptimizer = performanceOptimizerInstance;

// 导出供其他模块使用
if (typeof module !== 'undefined' && module.exports) {
  module.exports = PerformanceOptimizer;
}/**
 * IC Studio 访问码验证增强器
 * 在访问码验证成功后提供更好的用户体验
 */

(function() {
  console.log('🔧 访问码验证增强器加载');

  // 等待页面加载完成
  document.addEventListener('DOMContentLoaded', function() {
    enhanceAccessCodeFlow();
  });

  // 延迟执行，确保其他脚本都已加载
  setTimeout(enhanceAccessCodeFlow, 1000);

  function enhanceAccessCodeFlow() {
    console.log('✨ 开始增强访问码验证流程');

    // 1. 增强直接验证函数 - 调用 CloudBase API
    if (window.directVerifyCode) {
      const originalDirectVerify = window.directVerifyCode;
      window.directVerifyCode = async function() {
        console.log('🚀 增强版访问码直接验证 - 调用 CloudBase API');
        
        const input = document.getElementById('access-code-input');
        const resultDiv = document.getElementById('verify-result');
        
        if (!input || !resultDiv) {
          console.error('❌ 找不到访问码输入元素');
          return;
        }
        
        const code = input.value.trim().toUpperCase();
        
        if (!code) {
          resultDiv.innerHTML = '<span style="color: #e74c3c;">❌ 请输入访问码</span>';
          return;
        }
        
        if (!code || (code.length !== 12 && code.length !== 11)) {
          resultDiv.innerHTML = '<span style="color: #e74c3c;">❌ 请输入有效的11-12位访问码</span>';
          return;
        }
        
        resultDiv.innerHTML = '<span style="color: #3498db;">🔄 正在验证访问码...</span>';
        
        try {
          // 调用 CloudBase API 进行服务器端验证
          if (window.cloudbaseAPI && window.cloudbaseAPI.verifyAccessCode) {
            console.log('🚀 使用 CloudBase API 验证访问码');
            const result = await window.cloudbaseAPI.verifyAccessCode(code);
            
            if (result.valid) {
              console.log('✅ CloudBase 验证成功:', code);
              resultDiv.innerHTML = '<span style="color: #27ae60;">✅ 验证成功！正在更新界面...</span>';
              
              // 立即更新UI而不刷新页面
              if (window.premiumUIManager) {
                window.premiumUIManager.refreshUI();
                console.log('✅ UI已刷新，无需重载页面');
                
                // 显示成功消息后清理输入
                setTimeout(() => {
                  input.value = '';
                  resultDiv.innerHTML = '<span style="color: #27ae60;">✅ 高级功能已激活</span>';
                }, 1000);
                
              } else {
                // 备用：页面刷新
                console.log('⚠️ UI管理器未找到，执行页面刷新');
                setTimeout(() => {
                  window.location.reload();
                }, 1500);
              }
              
            } else {
              console.log('❌ CloudBase 验证失败:', result.error);
              resultDiv.innerHTML = `<span style="color: #e74c3c;">❌ ${result.error}</span>`;
            }
          } else {
            // 备用方案：调用页面上的 verifyAccessCodeWithServer 函数
            console.log('⚠️ CloudBase API 不可用，使用备用验证');
            if (window.verifyAccessCodeWithServer) {
              await window.verifyAccessCodeWithServer();
            } else {
              resultDiv.innerHTML = '<span style="color: #e74c3c;">❌ 验证系统不可用</span>';
            }
          }
          
        } catch (error) {
          console.error('❌ 验证过程失败:', error);
          resultDiv.innerHTML = '<span style="color: #e74c3c;">❌ 验证失败，请稍后重试</span>';
        }
      };
      
      console.log('✅ directVerifyCode 函数已增强');
    }

    // 2. 增强一般验证函数 - 调用 CloudBase API
    if (window.verifyAccessCode) {
      const originalVerifyAccessCode = window.verifyAccessCode;
      window.verifyAccessCode = async function() {
        console.log('🔍 增强版访问码验证 - 调用 CloudBase API');
        
        const input = document.getElementById('access-code-input');
        const resultDiv = document.getElementById('verify-result');
        
        if (!input || !resultDiv) {
          console.error('❌ 找不到访问码输入元素');
          return;
        }
        
        const code = input.value.trim().toUpperCase();
        
        if (!code) {
          resultDiv.innerHTML = '<span style="color: #e74c3c;">❌ 请输入访问码</span>';
          return;
        }
        
        if (!code || (code.length !== 12 && code.length !== 11)) {
          resultDiv.innerHTML = '<span style="color: #e74c3c;">❌ 请输入有效的11-12位访问码</span>';
          return;
        }
        
        resultDiv.innerHTML = '<span style="color: #3498db;">🔄 正在验证访问码...</span>';
        
        try {
          // 调用 CloudBase API 进行服务器端验证
          if (window.cloudbaseAPI && window.cloudbaseAPI.verifyAccessCode) {
            console.log('🚀 使用 CloudBase API 验证访问码');
            const result = await window.cloudbaseAPI.verifyAccessCode(code);
            
            if (result.valid) {
              console.log('✅ CloudBase 验证成功:', code);
              resultDiv.innerHTML = '<span style="color: #27ae60;">✅ 验证成功！正在激活高级功能...</span>';
              
              // 立即更新UI
              if (window.premiumUIManager) {
                setTimeout(() => {
                  window.premiumUIManager.refreshUI();
                  resultDiv.innerHTML = '<span style="color: #27ae60;">✨ 高级功能已成功激活</span>';
                  input.value = '';
                }, 1000);
              } else {
                // 备用方案
                setTimeout(() => {
                  window.location.reload();
                }, 2000);
              }
            } else {
              console.log('❌ CloudBase 验证失败:', result.error);
              resultDiv.innerHTML = `<span style="color: #e74c3c;">❌ ${result.error}</span>`;
            }
          } else {
            // 备用方案：调用页面上的 verifyAccessCodeWithServer 函数
            console.log('⚠️ CloudBase API 不可用，使用备用验证');
            if (window.verifyAccessCodeWithServer) {
              await window.verifyAccessCodeWithServer();
            } else {
              resultDiv.innerHTML = '<span style="color: #e74c3c;">❌ 验证系统不可用</span>';
            }
          }
          
        } catch (error) {
          console.error('❌ 验证过程失败:', error);
          resultDiv.innerHTML = '<span style="color: #e74c3c;">❌ 验证失败，请稍后重试</span>';
        }
      };
      
      console.log('✅ verifyAccessCode 函数已增强');
    }

    // 3. 提供全局重置函数
    window.resetToTrialMode = function() {
      console.log('🔄 重置为试用模式');
      
      localStorage.removeItem('ic-premium-access');
      localStorage.removeItem('ic-full-access');
      localStorage.removeItem('ic-verified-user');
      
      if (window.premiumUIManager) {
        window.premiumUIManager.refreshUI();
        console.log('✅ 已切换到试用模式UI');
      } else {
        window.location.reload();
      }
    };

    // 4. 提供全局升级函数
    window.upgradeToFullVersion = function(customCode) {
      // 生成完全随机的11-12位访问码
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      const length = Math.random() < 0.5 ? 11 : 12;
      let randomCode = '';
      for (let i = 0; i < length; i++) {
        randomCode += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      const code = customCode || randomCode;
      
      const accessData = {
        code: code,
        activatedAt: Date.now(),
        deviceId: 'manual-upgrade',
        expiresAt: null,
        version: '2.0-manual-upgrade'
      };
      
      localStorage.setItem('ic-premium-access', JSON.stringify(accessData));
      console.log('✅ 手动升级完成:', code);
      
      if (window.premiumUIManager) {
        window.premiumUIManager.refreshUI();
        alert(`✅ 升级成功！\n访问码: ${code}\n\n高级功能已激活`);
      } else {
        alert(`✅ 升级成功！\n访问码: ${code}\n\n页面将刷新以激活功能`);
        setTimeout(() => window.location.reload(), 1000);
      }
    };

    // 5. 提供全局重置为新用户函数
    window.resetToFreshUser = function() {
      console.log('🔄 重置为全新用户状态');
      
      try {
        // 清理所有存储的用户数据
        localStorage.removeItem('ic-premium-access');
        localStorage.removeItem('ic-full-access');
        localStorage.removeItem('ic-verified-user');
        localStorage.removeItem('ic-sight-reading-trial');
        localStorage.removeItem('ic-device-id');
        localStorage.removeItem('ic-trial-end');
        localStorage.removeItem('ic-reset-count');
        localStorage.removeItem('ic-anticheat-exempt');
        
        // 清理会话存储
        sessionStorage.removeItem('ic-device-id-session');
        
        // 清理cookie
        document.cookie = 'ic_device_backup=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        
        console.log('✅ 已清理所有用户数据');
        
        // 刷新UI状态
        if (window.premiumUIManager) {
          window.premiumUIManager.refreshUI();
          console.log('✅ UI已重置为试用模式');
        }
        
        // 重新初始化试用限制器
        if (window.trialLimiter) {
          // 等待一下再重新初始化，确保数据清理完成
          setTimeout(() => {
            window.trialLimiter.init();
            console.log('✅ 试用限制器已重新初始化');
            
            // 显示成功消息
            alert('✅ 用户状态已重置为全新状态！\n现在可以重新开始10分钟试用。');
          }, 500);
        }
        
        // 清理访问码输入区域的显示状态
        const accessContainer = document.getElementById('access-code-container');
        const accessInput = document.getElementById('access-code-input');
        const verifyResult = document.getElementById('verify-result');
        
        if (accessContainer && accessContainer.innerHTML.includes('高级功能已激活')) {
          // 恢复原始的访问码输入界面
          window.location.reload();
        }
        
        if (accessInput) {
          accessInput.value = '';
        }
        
        if (verifyResult) {
          verifyResult.innerHTML = '';
        }
        
      } catch (error) {
        console.error('❌ 重置过程中出现错误:', error);
        alert('⚠️ 重置过程中出现错误，建议手动刷新页面');
      }
    };

    // 6. 提供快速测试函数
    window.testAccessCode = function(code) {
      code = code || 'J71YRYSV9K6W'; // 使用已知的测试访问码
      
      console.log(`🧪 测试访问码: ${code}`);
      
      const input = document.getElementById('access-code-input');
      if (input) {
        input.value = code;
        // 触发验证按钮更新
        if (window.updateVerifyButton) {
          window.updateVerifyButton();
        }
        
        // 模拟点击验证
        setTimeout(() => {
          if (window.verifyAccessCodeWithServer) {
            window.verifyAccessCodeWithServer();
          }
        }, 500);
      } else {
        console.error('❌ 找不到访问码输入框');
        alert('请先打开包含访问码输入框的页面');
      }
    };

    // 7. 提供调试辅助函数
    window.debugAccessSystem = function() {
      console.log('🔍 访问系统调试信息:');
      console.log('💾 LocalStorage数据:');
      console.log('  - ic-premium-access:', localStorage.getItem('ic-premium-access'));
      console.log('  - ic-sight-reading-trial:', localStorage.getItem('ic-sight-reading-trial'));
      console.log('  - ic-device-id:', localStorage.getItem('ic-device-id'));
      
      console.log('🎯 全局函数状态:');
      console.log('  - verifyAccessCodeWithServer:', typeof window.verifyAccessCodeWithServer);
      console.log('  - updateVerifyButton:', typeof window.updateVerifyButton);
      console.log('  - trialLimiter:', !!window.trialLimiter);
      console.log('  - premiumUIManager:', !!window.premiumUIManager);
      
      console.log('🔧 当前试用状态:');
      if (window.trialLimiter) {
        const status = window.trialLimiter.checkTrialStatus();
        console.log('  - 允许使用:', status.allowed);
        console.log('  - 剩余时间:', status.remaining);
        console.log('  - 是否过期:', status.expired);
      }
      
      return {
        localStorage: {
          premiumAccess: localStorage.getItem('ic-premium-access'),
          trial: localStorage.getItem('ic-sight-reading-trial'),
          deviceId: localStorage.getItem('ic-device-id')
        },
        functions: {
          verifyServer: typeof window.verifyAccessCodeWithServer,
          updateButton: typeof window.updateVerifyButton,
          trialLimiter: !!window.trialLimiter,
          uiManager: !!window.premiumUIManager
        },
        trialStatus: window.trialLimiter ? window.trialLimiter.checkTrialStatus() : null
      };
    };

    console.log('🎉 访问码验证增强完成');
    console.log('💡 可用的调试命令:');
    console.log('  - resetToFreshUser() - 重置为全新用户');
    console.log('  - testAccessCode() - 测试已知访问码');
    console.log('  - debugAccessSystem() - 显示系统调试信息');
  }

})();